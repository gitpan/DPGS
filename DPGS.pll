#!/usr/bin/perl
# (make sure the line above^ is correct for your system)
#######################################################
# Configuration variables 
########################################################
$DETAILS{'DPGS'} = "DPGS.pll";
# url to DPGS file

$photos_url = "/PG/members";
# url to photos

$path_to_data = "C:\\WWW\\russia_data\\PG";
# passwords will be stored here. must be non-public.

$path_to_members = "C:\\WWW\\russia\\PG\\members";
# member photos and profiles will be stored here. must be public.

$path_to_templates = "C:\\WWW\\russia\\PG\\templates";
# path to templates.

@referers = ('russia.virtualcomm.com','virtualrussia.net','www.virtualrussia.net','127.0.0.1','localhost');
# security protection. put your domain(s) here, separated by comma.

$DETAILS{'webmaster'} = '<A HREF="mailto:ilia@lobsanov.com">ilia@lobsanov.com</A>';
# your email address. will be visible on error pages.

$DETAILS{'home'} = "Virtual Russia Duma";
# link name for the home_url.

$DETAILS{'home_url'} = "/PG/";
# root or index page.

$DETAILS{'body'} = 'BACKGROUND="/images/whitemarble.jpg" BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000"';
# body tag property

########################################################
print "HTTP/1.0 200 OK\n"; # change to HTTP/1.1 if needed
########################################################
# DO NOT CHANGE ANYTHING BELOW!
# You are setup. Now check the syntax from the command line via:
#   perl -c DPGS.pll 
#       (N.B. pll is just an extension. You can change it)
# Finally, if you're on UNIX, don't forget to chmod 755 this file.

#use Benchmark;
#$t0 = new Benchmark;

$delimiter = "==";
$DETAILS{'version'} = "DPGS 0.99.4";

&parse_form;

open(MEMBERS_LIST, "$path_to_data/members.idx") || &error("Can't open MEMBERS_LIST file");
@members_list = <MEMBERS_LIST>;
close(MEMBERS_LIST);

$component_file = $FORM{'action'}.".dpgs";
if ( -e "$component_file" ) { require $component_file }

########################################################
sub check_url {
    my $check_referer = 0;

    # If a referring URL was specified, for each valid referer, make sure
    # that a valid referring URL was passed.
    if ($ENV{'HTTP_REFERER'}) {
        foreach $referer (@referers) {
            if ($ENV{'HTTP_REFERER'} =~ m|https?://([^/]*)$referer|i) {
                $check_referer = 1;
                last;
            }
        }
    }
	else {
        $check_referer = 1;
    }

    # If the HTTP_REFERER was invalid, send back an error.                   #
    if ($check_referer != 1) { &error('bad_referer') }
}

# Parse by POST or GET
sub parse_form {
    # Determine the form's REQUEST_METHOD (GET or POST) and split the form   #
    # fields up into their name-value pairs.  If the REQUEST_METHOD was      #
    # not GET or POST, send an error.                                        #
    if ($ENV{'REQUEST_METHOD'} eq 'GET') {
        # Split the name-value pairs
        @pairs = split(/&/, $ENV{'QUERY_STRING'});
    }
    elsif ($ENV{'REQUEST_METHOD'} eq 'POST') {
        # Get the input
        read(STDIN, $buffer, $ENV{'CONTENT_LENGTH'});
 
        # Split the name-value pairs
        @pairs = split(/&/, $buffer);
    }
#    else {
#        &error("Unrecognized REQUEST_METHOD");
#    }

	foreach $pair (@pairs) {
        my ($name, $value) = split(/=/, $pair);
	
        $value =~ tr/+/ /;
        $value =~ s/%([a-fA-F0-9][a-fA-F0-9])/pack("C", hex($1))/eg;
        $value =~ s/<([^>]|\n)*>//g;
        $value =~ s/<!--(.|\n)*-->//g; 	#removes any server side includes
        $value =~ s/^\s+//;	#remove any leading spaces
        $value =~ s/\s+$//; #remove any trailing spaces
        $value =~ s/$delimiter//g; #remove delimiters if any.
        $value =~ s/\"/\&quot\;/g; #replace quotes with &quot;
        $value =~ s/\r\n/<BR>/g; #replace new line characters with <BR>
        $FORM{$name} = $value;
	}
}

sub replace_values {
	my ($file, @FILE, $details_key, $details_value);
    $file = $_[0];
	@FILE = <$file>;
	close($file);
	# Put the file contents into one big string
	$file = join('', @FILE); 

	while ( ($details_key, $details_value) = each(%DETAILS) ) {
		$file =~ s/%%$details_key%%/$details_value/gi;
	}
    $file =~ s/%%.+%%//gi if ( $file =~ /%%.+%%/ );
	print "<!-- Generated by $DETAILS{'version'} http://lobsanov.com/ilia/DPGS -->\n";
	print $file;
}

sub get_date {
	local($adt_time) = $_[0];
    local(@months) = ('January','February','March','April','May','June','July',
	         	'August','September','October','November','December');

    local($sec,$min,$hour,$mday,$mon,$year,$wday) = (localtime($adt_time))[0,1,2,3,4,5,6];
    local($time) = sprintf("%02d:%02d:%02d",$hour,$min,$sec);
    $year += 1900;

    # Format the date.
    local($date) = "$months[$mon] $mday, $year at $time";
	return $date;
}

sub error {
	&html_header("An error has occurred...");
	print "<BLOCKQUOTE>$_[0]</BLOCKQUOTE>";
	print "Please contact $DETAILS{'webmaster'} for assistance<BR>\n";
	&html_trailer;
	exit;
}

sub html_header {
	print "<HTML><HEAD><TITLE>$_[0]</TITLE></HEAD>\n";
	print "<BODY $DETAILS{'body'}>\n";
    print "<H1>$_[0]</H1>\n";
}

sub html_trailer {
	print qq(<HR><A HREF="$DETAILS{'home_url'}" TARGET="_parent">$DETAILS{'home'}</A>\n);
    print qq(<P> <font size=1>Powered by <a href="http://lobsanov.com/ilia/DPGS" TARGET="_top">$DETAILS{'version'}</A></font>\n);
	print "</BODY></HTML>"; 
}

sub round {
    my $number = shift;
    return int($number + .5);
}